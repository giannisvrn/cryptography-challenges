import socket
import string

HOST = "195.134.67.7"
PORT = 10062

def send_msg(message): 
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((HOST,PORT))
        welcome_msg = s.recv(1024)
        
        s.sendall(f"encrypt\n".encode())
        response = s.recv(1024)
        #print(response)
        
        #s.sendall(message + b"\n")
        s.sendall(message.encode() + b"\n")
        response = s.recv(1024).strip()
        return response

prefix = "signature="
known_flag = ""
possible_chars = string.digits + string.ascii_letters + string.punctuation

while True:
    best_guess = ""
    
    # finding the padding needed for the chr(0) -> we know chr(0) is not part of the flag, so if another character needs more padding it means that this character is part of the flag
    test_message = prefix + known_flag + chr(0)
    test_response = send_msg(test_message)
    test_length = len(test_response)
    
    test_new_length = test_length
    test_padding_needed = 0
    test_new_message = test_message
    while test_new_length == test_length:  # we stop when the length of the ciphertext if increased
        test_padding_char = chr(65 + test_padding_needed) # we use as padding uppercase characters because they are probably not in the flag( based on the previous flags found )
        test_new_message += test_padding_char
        
        test_new_response = send_msg(test_new_message)
        test_new_length = len(test_new_response)

        test_padding_needed += 1

    # we do the same for every of possible_chars and we stop when we find a character that needs more padding than chr(0)
    for byte_char in possible_chars:
        message = prefix + known_flag + byte_char

        response = send_msg(message)
        length_cipher = len(response)
        
        new_length = length_cipher
        padding_needed = 0
        
        new_message = message
        while new_length == length_cipher:
            padding_char = chr(65 + padding_needed)
            new_message += padding_char
            
            new_response = send_msg(new_message)
            new_length = len(new_response)
            
            padding_needed += 1
            
        print("padding_needed:",padding_needed) 
        if padding_needed > test_padding_needed:
            best_guess = byte_char
            break

    known_flag += best_guess
    print("KNOWN FLAG:",known_flag)
    
    

