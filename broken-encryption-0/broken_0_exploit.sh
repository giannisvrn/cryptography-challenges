#!/bin/bash

# Function to extract the Agent number from the output
extract_agent_number() {
    sed -n '/Agent number:/s/Agent number: //p'
}

update_target_block() {
    num_A=$1
    A_string=$(printf 'A%.0s' $(seq 1 $num_A))
    output=$(echo "$A_string" | nc 195.134.67.7 10074)
    agent_number=$(echo "$output" | extract_agent_number)
    new_target_block=$(python3 sixth_block.py "$agent_number")
    echo "$new_target_block"
}

# Output file to save results
output_file="output.txt"

# Ensure output file is empty before starting
echo -n > "$output_file"

# Known target cipher block for comparison
target_cipher_block="b9791886155e0e3c70ae64342cb39903"

# Prefix and fixed part of the input string
prefix="1234567890"
fixed_part="1000000000000000"

num_A=12
# Loop through all possible byte values
for i in {1..49}; do

	for byte in {0..255}; do
    		byte_char=$(printf "\\x$(printf %02x $byte)")

    		# Create the input string with prefix, fixed part, and the current byte
       		input_string="$prefix$byte_char$fixed_part"
    
		# Echo the string followed by the number of repetitions
    		echo "Sending: $input_string"

    		# Send the string over netcat to the specified address and port
    		output=$(echo -e "$input_string" | nc 195.134.67.7 10074)

    		# Extract the Agent number from the output
    		agent_number=$(echo "$output" | extract_agent_number)

    		# Pass the Agent number as an argument to the Python script
    		second_block=$(python3 cipher_blocks.py "$agent_number")

    		# Print the extracted Agent number and second last block for verification (optional)
    		echo "Received Agent number: $agent_number"
    		echo "second block: $second_block"
    		echo "Target block: $target_cipher_block"

    		# Check if the second last block matches the target block
    		if [ "$second_block" == "$target_cipher_block" ]; then
        		echo "Found matching byte: $byte_char"
        		echo "Byte value: $byte"
        		echo "second block: $second_last_block"
    		    	
			echo -n "$byte_char" >> "$output_file"
			# Update fixed_part by adding the found byte at the start and removing the last character
		        fixed_part="$byte_char${fixed_part:0:15}"

			num_A=$((num_A + 1))

			# Update the target cipher block using the new number of 'A's
            		target_cipher_block=$(update_target_block "$num_A")

			break
    		fi	
	done
done

echo "Output saved to $output_file"

