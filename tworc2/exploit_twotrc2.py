#!/usr/bin/python2 -u
import itertools
from Crypto.Cipher import ARC2

plaintext = '12345678'
ciphertext = 'ab53cb32e9c49ba5'
encrypted = 'b6a00ac6d77cbcaa8e6b57c65cd056cf639920287fcc5a1ac3cd0d91b1067cdd'

possible_chars = '0123456789abcdef'
combinations = itertools.product(possible_chars,repeat=6)
combinations2 = itertools.product(possible_chars,repeat=6)

def ecnrypt(m,key1):
    cipher = ARC2.new(key1, ARC2.MODE_ECB)
    m = cipher.encrypt(m)

    retrun m.encode('hex')

def decrypt(ciphertext_hex,key2):
    ciphertext = ciphertext_hex.decode('hex')
    cipher = ARC2.new(key2,ARX2.MODE_ECB)

    intermediate_msg = cipher.decrypt(ciphertext)
    return intermediate_msg.encode('hex')

def decrypt_full(ciphertext_hex,key1,key2):
    ciphertext = ciphertext_hex.decode('hex')
    cipher = ARC2.new(key2,ARC2.MODE_ECB)

    intermediate_msg = cipher.decrypt(ciphertext)
    cipher = ARC2.new(key1,ARC2.MODE_ECB)
    original_msg = cipher.decrypt(intermediate_msg)

    return original_msg

intermediate_msgs = {}
for combo in combinations:
    key1_hex = ''.join(combo)
    key1 = key1_hex.decode('hex')
    intermediate_msgs[key1_hex] = encrypt(plaintext,key1)

intermediate_set = set(intermediate_msgs.values())
for combo in combinations:
    key2_hex = ''.join(combo)
    key2 = key2_hex.decode('hex')

    intermediate = decrypt(ciphertext,key2)
    if intermediate in intermediate_set:
        key1_hex = next(k for k, v in intermediate_msgs.items() if v == intermediate)
        key1 = key1_hex.decode('hex')
        print("found")

        decrypted = decrypt_full(encrypted,key1,key2)
        print(decrypted)

        break

